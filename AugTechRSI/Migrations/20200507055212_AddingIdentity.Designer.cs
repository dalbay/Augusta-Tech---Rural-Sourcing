// <auto-generated />
using System;
using AugTechRSI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AugTechRSI.Migrations
{
    [DbContext(typeof(RuralSourcing_HRdbContext))]
    [Migration("20200507055212_AddingIdentity")]
    partial class AddingIdentity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AugTechRSI.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DepartmentID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("DepartmentId");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("AugTechRSI.Models.Employee", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DepartmentId")
                        .HasColumnName("DepartmentID");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("LocationId")
                        .HasColumnName("LocationID");

                    b.Property<string>("Position")
                        .HasMaxLength(50);

                    b.Property<int?>("SowId")
                        .HasColumnName("SOW_ID");

                    b.Property<string>("SupFirstName")
                        .HasMaxLength(50);

                    b.Property<string>("SupLastName")
                        .HasMaxLength(50);

                    b.HasKey("UserId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("LocationId");

                    b.HasIndex("SowId");

                    b.HasIndex("SupFirstName", "SupLastName");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("AugTechRSI.Models.EmployeeSkill", b =>
                {
                    b.Property<int>("EmpSkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EmpSkillID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("LevelId")
                        .HasColumnName("LevelID");

                    b.Property<int>("SkillId")
                        .HasColumnName("SkillID");

                    b.Property<int>("UserId")
                        .HasColumnName("UserID");

                    b.HasKey("EmpSkillId");

                    b.HasIndex("LevelId");

                    b.HasIndex("SkillId");

                    b.HasIndex("UserId");

                    b.ToTable("EmployeeSkill");
                });

            modelBuilder.Entity("AugTechRSI.Models.Level", b =>
                {
                    b.Property<int>("LevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LevelID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LevelDescription")
                        .HasMaxLength(50);

                    b.Property<string>("LevelValue")
                        .HasMaxLength(50);

                    b.HasKey("LevelId");

                    b.ToTable("Level");
                });

            modelBuilder.Entity("AugTechRSI.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LocationID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LocationPhone")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.HasKey("LocationId");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("AugTechRSI.Models.Skill", b =>
                {
                    b.Property<int>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SkillID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SkillDescription")
                        .HasMaxLength(100);

                    b.Property<string>("SkillTitle")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("TypeId")
                        .HasColumnName("TypeID");

                    b.HasKey("SkillId");

                    b.HasIndex("TypeId");

                    b.ToTable("Skill");
                });

            modelBuilder.Entity("AugTechRSI.Models.SkillType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TypeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TypeDescription")
                        .HasMaxLength(100);

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("TypeId");

                    b.ToTable("SkillType");
                });

            modelBuilder.Entity("AugTechRSI.Models.Sow", b =>
                {
                    b.Property<int>("SowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SOW_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("ContractEnd")
                        .HasColumnType("date");

                    b.Property<DateTime>("ContractStart")
                        .HasColumnType("date");

                    b.HasKey("SowId");

                    b.ToTable("SOW");
                });

            modelBuilder.Entity("AugTechRSI.Models.Supervisor", b =>
                {
                    b.Property<string>("SupFirstName")
                        .HasMaxLength(50);

                    b.Property<string>("SupLastName")
                        .HasMaxLength(50);

                    b.HasKey("SupFirstName", "SupLastName");

                    b.ToTable("Supervisor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AugTechRSI.Models.Employee", b =>
                {
                    b.HasOne("AugTechRSI.Models.Department", "Department")
                        .WithMany("Employee")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK_Employee_Department");

                    b.HasOne("AugTechRSI.Models.Location", "Location")
                        .WithMany("Employee")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_Employee_Location");

                    b.HasOne("AugTechRSI.Models.Sow", "Sow")
                        .WithMany("Employee")
                        .HasForeignKey("SowId")
                        .HasConstraintName("FK_Employee_SOW");

                    b.HasOne("AugTechRSI.Models.Supervisor", "Sup")
                        .WithMany("Employee")
                        .HasForeignKey("SupFirstName", "SupLastName")
                        .HasConstraintName("FK_Employee_Supervisor");
                });

            modelBuilder.Entity("AugTechRSI.Models.EmployeeSkill", b =>
                {
                    b.HasOne("AugTechRSI.Models.Level", "Level")
                        .WithMany("EmployeeSkill")
                        .HasForeignKey("LevelId")
                        .HasConstraintName("FK_EmployeeSkill_Level");

                    b.HasOne("AugTechRSI.Models.Skill", "Skill")
                        .WithMany("EmployeeSkill")
                        .HasForeignKey("SkillId")
                        .HasConstraintName("FK_EmployeeSkill_Skill");

                    b.HasOne("AugTechRSI.Models.Employee", "User")
                        .WithMany("EmployeeSkill")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_EmployeeSkill_Employee");
                });

            modelBuilder.Entity("AugTechRSI.Models.Skill", b =>
                {
                    b.HasOne("AugTechRSI.Models.SkillType", "Type")
                        .WithMany("Skill")
                        .HasForeignKey("TypeId")
                        .HasConstraintName("FK_Skill_SkillType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
